UD-985
======

.. _CDAPS: https://github.com/idekerlab/cy-community-detection
.. _7178ff83-6af8-11ea-bfdc-0ac135e8bacf: https://ndexbio.org/#/network/7178ff83-6af8-11ea-bfdc-0ac135e8bacf



The Problem
-----------

Currently the Community Detection App (`CDAPS`_) allows users
to run four community detection apps (OSLOM, CliXO, Infomap, & Louvain)
but requires the user to invest significant effort to decide on
optimal parameters to use.


The Ultimate Goal
-----------------

The ultimate goal is to empower `CDAPS`_ with features that makes it
easier for users to generate "good" hierarchies. (still not sure on definition of "good")


The Intermediate Goal
---------------------

This repo contains a set of scripts that attempt to see if
a neural network approach can be used to predict results of
a community detection run. More specifically, scripts in
this repo attempt to predict the number of
clusters a given community detection algorithm will
generate for a given graph.

Design of Neural Network
------------------------


.. image:: docs/images/predictclustersgraph.png
        :target: https://ndexbio.org/#/network/7178ff83-6af8-11ea-bfdc-0ac135e8bacf

`7178ff83-6af8-11ea-bfdc-0ac135e8bacf`_

**Description of the inputs**

* ``# edges / # nodes ^2``

  The number of edges in the graph divided by the number of nodes squared

* ``density``

  Value from this equation described by networkx:
  https://networkx.github.io/documentation/stable/reference/generated/networkx.classes.function.density.html

* ``degree mean / # nodes``

  Average of degree of all nodes divided by number of nodes in graph

* ``degree stddev``

  Standard deviation of degree of all nodes in graph



Scripts Requirements
--------------------

* ndex2 client > 3.3.1 & < 4.0.0
* pandas
* pytorch
* networkx > 2.3
* matplotlib

Scripts and what they do
------------------------

* ``create_trainingdata.py``

  Takes networks created from ``generate_subgraph.py`` or ``generate_gosubgraph.py``
  along with output from a community detection algorithm and generates training
  data usable by ``predict_clusters.py``

* ``extract_trainingdata.py``

  **NOT IMPLEMENTED** This script will take training data
  generated by ``create_trainingdata.py`` and attempt to normalize the data
  by extracting a subset of the data where the number of clusters is
  evenly distributed

* ``generate_subgraph.py``

  Creates networks from an input CX network
  by randomly picking nodes

* ``generate_gosubgraph.py``

  Creates networks from an input CX network
  by selecting nodes matching genes for GO terms

* ``plot_trainindata.py``

  Creates plots from training data generated by ``create_trainingdata.py``

* ``predict_clusters.py``

  Runs training and prediction
